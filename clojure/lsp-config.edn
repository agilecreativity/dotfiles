;; ---------------------------------------------------- ;;
;; https://clojure-lsp.github.io/clojure-lsp/settings/
;; https://github.com/ericdallo/dotfiles/blob/master/.lsp/config.edn - the sample config
;; https://github.com/weavejester/cljfmt/blob/master/cljfmt/resources/cljfmt/indents/clojure.clj - official indentation rules
;; https://raw.githubusercontent.com/ericdallo/dotfiles/master/.lsp/config.edn
;; https://github.com/clj-kondo/clj-kondo/blob/master/doc/config.md
{
 #_#_:linters   {:unused-namespace-declarations #{"postman"}}
 #_#_:clj-kondo {:skip-comments true
                 :linters {:refer-all {:exclude [clojure.test midje.sweet]}
                           :unresolved-symbol {:level :error
                                               :exclude [fact
                                                         facts
                                                         =>
                                                         (midje.sweet/fact)
                                                         (midje.sweet/facts)
                                                         (midje.parsing.arrow-symbols/=>)]}}
                 #_#_:lint-as {bonafont.logic.flow-edge/def                clojure.core/def
                               bonafont.logic.flow-edge/defedge            clojure.core/def
                               bonafont.logic.flow-config/defflow          clojure.core/def
                               bonafont.logic.flow-config/def              clojure.core/def
                               bonafont.flows.debit-request.edges/def-edge clojure.core/def
                               common-test.postman.helpers.core/defstep    clojure.core/defn
                               common-graphql.lacinia.sweet/defresolver    clojure.core/def
                               common-graphql.lacinia.sweet/defmutation    clojure.core/def
                               common-graphql.lacinia.sweet/definterface   clojure.core/def
                               common-graphql.lacinia.sweet/defobject      clojure.core/def
                               common-graphql.lacinia.sweet/defscalar      clojure.core/def
                               common-graphql.lacinia.sweet/defunion       clojure.core/def
                               common-graphql.lacinia.sweet/definput       clojure.core/def
                               common-graphql.lacinia.sweet/defenum        clojure.core/def
                               integration.aux.init/defflow                clojure.core/def
                               postman.aux.helpers/defaction               clojure.core/defn
                               state-flow.cljtest/defflow                  clojure.core/def
                               rewrite-clj.zip/edit->                      clojure.core/->
                               rewrite-clj.zip.subedit/edit->              clojure.core/->
                               rewrite-clj.zip.subedit/subedit->           clojure.core/->}}

 :cljfmt {:align-associative? false
          :indentation? true
          :remove-consecutive-blank-lines? true
          :remove-multiple-non-indenting-spaces? true
          :remove-surrounding-whitespace? true
          :remove-trailing-whitespace? true
          :split-keypairs-over-multiple-lines? true}

 :linters {:unused-public-var {:exclude-when-defined-by #{state-flow.cljtest/defflow}
                               :exclude #{run-dev
                                          servlet-init
                                          servlet-destroy
                                          servlet-service}}}

 :source-paths #{"src" "test" "dev" #_"postman"}

 :use-metadata-for-privacy? true

 :keep-require-at-start? false

 :show-docs-arity-on-same-line? true

 :text-document-sync-kind :full

 :semantic-tokens? true

 :auto-add-ns-to-new-files? true

 :lint-project-files-after-startup? true

 ;; :additional-snippets [{:name "wrap-let-sexpr$"
 ;;                        :detail "Wrap in let sexpr"
 ;;                        :snippet "(let [$1] $0$current-form)"}]

 :dependency-scheme "jar"
 }
